--- class.phpmailer.php.orig	2012-06-13 18:06:16.340136944 -0300
+++ class.phpmailer.php	2012-11-02 17:34:20.192379054 -0300
@@ -56,7 +56,7 @@
    * Sets the CharSet of the message.
    * @var string
    */
-  public $CharSet           = 'iso-8859-1';
+  public $CharSet           = 'UTF-8';
 
   /**
    * Sets the Content-type of the message.
@@ -70,6 +70,7 @@
    * @var string
    */
   public $Encoding          = '8bit';
+  public $TextEncoding      = '7bit';
 
   /**
    * Holds the most recent mailer error message.
@@ -312,7 +313,8 @@
   private   $bcc            = array();
   private   $ReplyTo        = array();
   private   $all_recipients = array();
-  private   $attachment     = array();
+  ## patched for phpList to allow inline images from templates
+  public   $attachment     = array();
   private   $CustomHeader   = array();
   private   $message_type   = '';
   private   $boundary       = array();
@@ -649,7 +651,7 @@
     $to = implode(', ', $toArr);
 
     $params = sprintf("-oi -f %s", $this->Sender);
-    if ($this->Sender != '' && strlen(ini_get('safe_mode'))< 1) {
+    if ($this->Sender != '' && (bool) ini_get("safe_mode") == FALSE)  {
       $old_from = ini_get('sendmail_from');
       ini_set('sendmail_from', $this->Sender);
       if ($this->SingleTo === true && count($toArr) > 1) {
@@ -759,7 +761,7 @@
     if($this->SMTPKeepAlive == true) {
       $this->smtp->Reset();
     }
-    return true;
+   return true;
   }
 
   /**
@@ -1198,16 +1200,16 @@
 
     switch($this->message_type) {
       case 'alt':
-        $body .= $this->GetBoundary($this->boundary[1], '', 'text/plain', '');
-        $body .= $this->EncodeString($this->AltBody, $this->Encoding);
+        $body .= $this->GetBoundary($this->boundary[1], '', 'text/plain', $this->TextEncoding);
+        $body .= $this->EncodeString($this->AltBody, $this->TextEncoding);
         $body .= $this->LE.$this->LE;
-        $body .= $this->GetBoundary($this->boundary[1], '', 'text/html', '');
+        $body .= $this->GetBoundary($this->boundary[1], '', 'text/html', $this->Encoding);
         $body .= $this->EncodeString($this->Body, $this->Encoding);
         $body .= $this->LE.$this->LE;
         $body .= $this->EndBoundary($this->boundary[1]);
         break;
       case 'plain':
-        $body .= $this->EncodeString($this->Body, $this->Encoding);
+        $body .= $this->EncodeString($this->Body, $this->TextEncoding);
         break;
       case 'attachments':
         $body .= $this->GetBoundary($this->boundary[1], '', '', '');
@@ -1218,10 +1220,10 @@
       case 'alt_attachments':
         $body .= sprintf("--%s%s", $this->boundary[1], $this->LE);
         $body .= sprintf("Content-Type: %s;%s" . "\tboundary=\"%s\"%s", 'multipart/alternative', $this->LE, $this->boundary[2], $this->LE.$this->LE);
-        $body .= $this->GetBoundary($this->boundary[2], '', 'text/plain', '') . $this->LE; // Create text body
-        $body .= $this->EncodeString($this->AltBody, $this->Encoding);
+        $body .= $this->GetBoundary($this->boundary[2], '', 'text/plain', $this->TextEncoding) . $this->LE; // Create text body
+        $body .= $this->EncodeString($this->AltBody, $this->TextEncoding);
         $body .= $this->LE.$this->LE;
-        $body .= $this->GetBoundary($this->boundary[2], '', 'text/html', '') . $this->LE; // Create the HTML body
+        $body .= $this->GetBoundary($this->boundary[2], '', 'text/html', $this->Encoding) . $this->LE; // Create the HTML body
         $body .= $this->EncodeString($this->Body, $this->Encoding);
         $body .= $this->LE.$this->LE;
         $body .= $this->EndBoundary($this->boundary[2]);
@@ -1768,6 +1770,36 @@
   }
 
   /**
+   * Adds an embedded attachment as a string.  This can include images, sounds, and
+   * just about any other document.  Make sure to set the $type to an
+   * image type.  For JPEG images use "image/jpeg" and for GIF images
+   * use "image/gif".
+   * @param string $string The attachment encoded in "encoding"
+   * @param string $cid Content ID of the attachment.  Use this to identify
+   *        the Id for accessing the image in an HTML form.
+   * @param string $name Overrides the attachment name.
+   * @param string $encoding File encoding (see $Encoding).
+   * @param string $type File extension (MIME) type.
+   * @return bool
+   */
+  public function AddEmbeddedImageString($string, $cid, $name = '', $encoding = 'base64', $type = 'application/octet-stream') {
+
+    // Append to $attachment array
+    $this->attachment[] = array(
+      0 => $string,
+      1 => $name,
+      2 => $name,
+      3 => $encoding,
+      4 => $type,
+      5 => true,  // isStringAttachment
+      6 => 'inline',
+      7 => $cid
+    );
+
+    return true;
+  }
+
+  /**
    * Adds an embedded attachment.  This can include images, sounds, and
    * just about any other document.  Make sure to set the $type to an
    * image type.  For JPEG images use "image/jpeg" and for GIF images
@@ -2317,4 +2349,4 @@
     return $errorMsg;
   }
 }
-?>
\ No newline at end of file
+?>
